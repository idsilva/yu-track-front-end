{"version":3,"sources":["Utiles/AddressFunctions.js","Component/Address.jsx","Component/AddressList.js","Component/SaveNewAddress.js","Component/MapContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Utiles","getCity","addressArray","i","length","types","long_name","getArea","j","getState","Geocode","setApiKey","enableDebug","Address","props","blurHandler","target","address","handlerBlur","name","value","handleCheckBoxClick","handlerCheckboxChanged","checked","goClick","handleGoClick","state","city","area","this","fromLatLng","coords","then","response","fullAddress","results","formatted_address","address_components","setState","error","console","id","_id","type","inline","onChange","placeholder","defaultValue","changeHandler","onBlur","onClick","Component","AddressList","handlerSubmit","e","deleteList","deleteAddressList","preventDefault","updateAddress","goFunction","handlerGoFunction","handlerCheckbox","add","find","element","push","index","findIndex","splice","componentWillReceiveProps","addressList","map","loc","key","style","textAlign","width","className","displayAddressList","SaveNewAddress","handlerClick","MapContainer","saveNewAddress","displayedMarker","position","lat","lng","createAddress","mapProps","marker","clickEvent","log","selectPosition","latLng","selectedPosition","onMarkerClick","selectedPlace","activeMarker","showingInfoWindow","centerPoint","displayMarkers","onPlaceSelected","place","latValue","geometry","location","lngValue","google","center","zoom","height","initialCenter","GoogleApiWrapper","apiKey","App","URI","setDisplayedMarker","centerLocation","axios","post","getAddressList","put","get","data","arrToDelete","deleteRequest","getDeleteRequest","all","reponse","catch","errors","arr","delete","navigator","geolocation","getCurrentPosition","latitude","longitude","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1ccb8914.chunk.js","sourcesContent":["\r\n\r\nexport class Utiles\r\n{\r\n\t/**\r\n\t  * Get the city and set the city input value to the one selected\r\n\t  *\r\n\t  * @param addressArray\r\n\t  * @return {string}\r\n\t  */\r\n\tstatic getCity = ( addressArray ) => {\r\n\t  let city = '';\r\n\t  for( let i = 0; i < addressArray.length; i++ ) {\r\n\t   if ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n\t\tcity = addressArray[ i ].long_name;\r\n\t\treturn city;\r\n\t   }\r\n\t  }\r\n\t };\r\n\t/**\r\n\t  * Get the area and set the area input value to the one selected\r\n\t  *\r\n\t  * @param addressArray\r\n\t  * @return {string}\r\n\t  */\r\n\t static getArea = ( addressArray ) => {\r\n\t  let area = '';\r\n\t  for( let i = 0; i < addressArray.length; i++ ) {\r\n\t   if ( addressArray[ i ].types[0]  ) {\r\n\t\tfor ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n\t\t if ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n\t\t  area = addressArray[ i ].long_name;\r\n\t\t  return area;\r\n\t\t }\r\n\t\t}\r\n\t   }\r\n\t  }\r\n\t };\r\n\t/**\r\n\t  * Get the address and set the address input value to the one selected\r\n\t  *\r\n\t  * @param addressArray\r\n\t  * @return {string}\r\n\t  */\r\n\t static getState = ( addressArray ) => {\r\n\t  let state = '';\r\n\t  for( let i = 0; i < addressArray.length; i++ ) {\r\n\t   for( let i = 0; i < addressArray.length; i++ ) {\r\n\t\tif ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n\t\t state = addressArray[ i ].long_name;\r\n\t\t return state;\r\n\t\t}\r\n\t   }\r\n\t  }\r\n\t };\r\n}","import React,{Component} from 'react';\r\nimport axios from 'axios'\r\nimport Geocode from \"react-geocode\";\r\nimport '../App.css';\r\nimport {Utiles} from '../Utiles/AddressFunctions';\r\n\r\nGeocode.setApiKey(\"AIzaSyCZEAaPR-yVMJZ9iAU-FPm67zLO3Ei_iNg\");\r\nGeocode.enableDebug();\r\n\r\nclass Address extends Component{\r\n\t\t\r\n\t\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\taddress: '',\r\n\t\t\tcity: '',\r\n\t\t\tarea: '',\r\n\t\t\tstate: ''}\r\n\t}\r\n\tblurHandler =({target})=>{\r\n\t\tlet {address,handlerBlur} = this.props\r\n\t\taddress.name = target.value;\r\n\t\thandlerBlur(address);\r\n\t}\r\n\t\r\n\thandleCheckBoxClick=({target})=>{\r\n\t\tconst {address,handlerCheckboxChanged} = this.props\r\n\t\thandlerCheckboxChanged(target.checked,address)\t\t\r\n\t}\r\n\t\r\n\tgoClick=({target})=>{\r\n\t\tconst {address,handleGoClick} = this.props\r\n\t\thandleGoClick(address);\r\n\t}\r\n\t\r\n\t/**\r\n\t  * Get the current address from the default map position and set those values in the state\r\n\t  */\r\n\t componentDidMount() {\r\n\t\tconst {address} = this.props\r\n\t\tGeocode.fromLatLng( address.coords[0] , address.coords[1] ).then(\r\n\t\t   response => {\r\n\t\t\tconst fullAddress = response.results[0].formatted_address,\r\n\t\t\t addressArray =  response.results[0].address_components,\r\n\t\t\t city = Utiles.getCity( addressArray ),\r\n\t\t\t area = Utiles.getArea( addressArray ),\r\n\t\t\t state = Utiles.getState( addressArray );\r\n\t\t  \r\n\t\t\tthis.setState( {\r\n\t\t\t fullAddress: ( fullAddress ) ? fullAddress : '',\r\n\t\t\t area: ( area ) ? area : '',\r\n\t\t\t city: ( city ) ? city : '',\r\n\t\t\t state: ( state ) ? state : '',\r\n\t\t\t} )\r\n\t\t   },\r\n\t\t   error => {\r\n\t\t\tconsole.error(error);\r\n\t\t   }\r\n\t\t);\r\n\t};\r\n\r\n \r\n\trender(){\r\n\t\tconst {address} = this.props\r\n\t\treturn (\r\n\t\t\t<div id={address._id}>\r\n\t\t\t\t<input type=\"checkbox\" inline={\"true\"} onChange={this.handleCheckBoxClick} />\r\n\t\t\t\t<input placeholder=\"Lugar\" defaultValue={address.name} onChange={this.changeHandler} onBlur={this.blurHandler}/> \r\n\t\t\t\t<input placeholder=\"Dirección\" defaultValue={this.state.fullAddress} /> \r\n\t\t\t\t<input type=\"button\" inline={\"true\"} onClick={this.goClick} value=\"go\"/>\r\n\t\t\t</div>\r\n\t\t);\t\t\r\n\t}\r\n}\r\n\r\nexport default Address;","import React,{Component} from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport Address from './Address'\r\nimport '../App.css';\r\n\r\nclass AddressList extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\taddressList:[],\r\n\t\t\tdeleteList:[]\r\n\t\t\t}\r\n\t}\r\n\t\r\n\thandlerSubmit=(e)=>\r\n\t{\r\n\t\tconst {deleteList} = this.state\r\n\t\tconst {deleteAddressList} = this.props\r\n\t\te.preventDefault()\r\n \t\tif(deleteList.length > 0)\r\n\t\t{\r\n\t\t\tdeleteAddressList(deleteList);\r\n\t\t}\r\n \t}\r\n\t\r\n\tupdateAddress = (address)=>{\r\n\t\tconst {updateAddress} = this.props\r\n\t\tupdateAddress(address)\r\n\t}\r\n\t\r\n\tgoFunction=(address)=>\r\n\t{\r\n\t\tconst {handlerGoFunction} = this.props\r\n\t\thandlerGoFunction(address);\r\n\t}\r\n\t\r\n\thandlerCheckbox = (add,address)=>\r\n\t{\r\n\t\tlet {deleteList} = this.state\r\n\t\tif(add)\r\n\t\t{\r\n\t\t\tconst found = deleteList.find(element => element._id === address._id);\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tdeleteList.push(address)\r\n\t\t\t\tthis.setState({deleteList:deleteList})\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tconst index = deleteList.findIndex(element => element._id === address._id);\r\n\t\t\tif(index>=0)\r\n\t\t\t{\r\n\t\t\t\tdeleteList.splice(index,1)\r\n\t\t\t\tthis.setState({deleteList:deleteList})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tcomponentWillReceiveProps=(props)=> {\r\n\t\tthis.setState({addressList: props.addressList});\r\n\t}\r\n\r\n\t\r\n\tdisplayAddressList(){\r\n\t\tif(this.state.addressList.length > 0)\r\n\t\t{\r\n\t\t\treturn this.state.addressList.map((loc, index)=>{\r\n\t\t\t\treturn <Address key={loc._id} \r\n\t\t\t\t\t\thandleGoClick={this.goFunction} \r\n\t\t\t\t\t\thandlerCheckboxChanged={this.handlerCheckbox}\r\n\t\t\t\t\t\thandlerBlur={this.updateAddress}\r\n\t\t\t\t\t\taddress={loc} />\r\n\t\t\t})\r\n\t\t}else{\r\n\t\t\treturn <p>No tienes direcciones guardadas</p>\r\n\t\t}\r\n\t}\r\n\trender(){\r\n\t\tconst {style} = this.props\r\n\t\treturn (\r\n\t\t<div style={style}>\r\n\t\t\t<label>Mis Direcciones<br/></label>\r\n\t\t\t<div style={{textAlign:\"left\",width:\"20%\"}}>\r\n\t\t\t\t<input type=\"submit\" value=\"X\" onClick={this.handlerSubmit} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t{this.displayAddressList()}\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\t\t\r\n\t}\r\n}\r\n\r\nexport default AddressList;","import React,{Component} from 'react';\r\nimport '../App.css';\r\n\r\nclass SaveNewAddress extends Component{\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\taddress:{}\r\n\t\t\t}\r\n\t}\r\n\t\r\n \r\n\thandlerClick=({target})=>\r\n\t{\r\n\t\tconst {address} = this.state\r\n\t\tif(address.name && address.name.length > 0)\r\n\t\t{\r\n\t\t\tconst {handlerClick} = this.props\r\n\t\t\thandlerClick(address);\r\n\t\t}\r\n \t}\r\n\t\r\n\tchangeHandler=({target})=>{\r\n\t\tlet {address} = this.state\r\n\t\taddress.name = target.value;\r\n\t\tthis.setState({address:address})\r\n\t}\r\n\t\t\r\n\trender(){\r\n\t\tconst {style} = this.props\r\n\t\treturn (\r\n\t\t<div style={style}>\r\n\t\t\t<label>Guarda tu dirección&nbsp;&nbsp;&nbsp;&nbsp;</label>\r\n\t\t\t<input placeholder=\"Mi Dreccion\" onChange={this.changeHandler} /> \r\n\t\t\t<input inline={\"true\"} type=\"button\" value=\"guardar\" onClick={this.handlerClick}/>\r\n\t\t</div>\r\n\t\t);\t\t\r\n\t}\r\n}\r\n\r\nexport default SaveNewAddress;","import React,{Component} from 'react';\nimport { Map, GoogleApiWrapper,Marker,InfoWindow } from 'google-maps-react';\nimport SaveNewAddress from './SaveNewAddress'\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nimport '../App.css';\nimport {Utiles}from '../Utiles/AddressFunctions';\n\nclass MapContainer extends Component{\n\t   \n\tconstructor(props) {\t\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdisplayedMarker:{},\n\t\t\tcenterPoint:props.centerPoint,\n\t\t\tselectedPlace: {},\n\t\t\tshowingInfoWindow:false\n\t\t\t}\n\t}\n\t\n\tsaveNewAddress = (address)=>{\n\t\tconst {displayedMarker} = this.state\n\t\tif(displayedMarker)\n\t\t{\n\t\t\taddress.coords=[displayedMarker.position.lat,displayedMarker.position.lng]\n\t\t\tconst {createAddress} = this.props\n\t\t\tcreateAddress(address);\n\t\t}\n\t\t\t\n\t}\n\thandlerClick=(mapProps, marker, clickEvent) =>{\n\t\tconsole.log(mapProps,marker)\n\t\tlet selectPosition = {name:\"\",position:{lat:clickEvent.latLng.lat(),lng:clickEvent.latLng.lng()}}\n\t\tlet address = {\n\t\t\tname:\"\",\n\t\t\tposition:{\n\t\t\tlat:clickEvent.latLng.lat(),\n\t\t\tlng:clickEvent.latLng.lng()\n\t\t\t}}\t\t\n\t\tthis.setState({selectedPosition:selectPosition,displayedMarker:address})\n\t}\n\t\n\tonMarkerClick = (props, marker, e) =>{\n\t\tconsole.log(props,marker,e)\n\t\t  this.setState({\n\t\t\tselectedPlace: props,\n\t\t\tactiveMarker: marker,\n\t\t\tshowingInfoWindow:true\n\t\t});\n\t}\n\t  \n\tcomponentWillReceiveProps=(props)=> {\n\t\tthis.setState({displayedMarker: props.displayedMarker,centerPoint:props.centerPoint});\n\t\t\n\t}\n\n\t\n\tdisplayMarkers = () => {\n\t\tconst {displayedMarker,activeMarker,showingInfoWindow,selectedPlace} = this.state;\n\t\t\n\t\treturn <Marker position={displayedMarker.position}\n\t\t\tname={displayedMarker.name}\n\t\t\tonClick={this.onMarkerClick} />\t\t\n\t}\n\t\n\t /**\n\t  * When the user types an address in the search box\n\t  * @param place\n\t  */\n\tonPlaceSelected = ( place ) => {\n\tconst address = place.formatted_address,\n\t   addressArray =  place.address_components,\n\t   city = Utiles.getCity( addressArray ),\n\t   area = Utiles.getArea( addressArray ),\n\t   state = Utiles.getState( addressArray ),\n\t   latValue = place.geometry.location.lat(),\n\t   lngValue = place.geometry.location.lng();\n\t   \n\t// Set these values in the state.\n\t  this.setState({\n\t   address: ( address ) ? address : '',\n\t   area: ( area ) ? area : '',\n\t   city: ( city ) ? city : '',\n\t   state: ( state ) ? state : '',\n\t   displayedMarker: {\n\t\t   name:( city ) ? city : '',\n\t\t   position:{\n\t\t\tlat: latValue,\n\t\t\tlng: lngValue\n\t\t   }\n\t   },\n\t   centerPoint:{\n\t\t   name:( city ) ? city : '',\n\t\t   position:{\n\t\t\tlat: latValue,\n\t\t\tlng: lngValue\n\t\t   }\n\t   }\n\t  })\n\t };\n\t \n\t \n\trender(){\n\t\tconst mapStyles = {\n\t\t\theight: '500px',\n\t\t\twidth: '500px'\n\t\t};\n\t\n\t\tconst {centerPoint} = this.state\n\t  return (\n\t\t<div id=\"mapBox\">\n\t\t\t<Map google={this.props.google}\n\t\t\t  onClick={this.handlerClick}\n\t\t\t  center = {centerPoint.position}\n\t\t\t  zoom={12}\n\t\t\t  style={mapStyles}\n\t\t\t  initialCenter={centerPoint.position}>\n\t\t\t        <Autocomplete style={{ width: '500px', height: '40px' }}\n\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\n\t\t\t\t\t\ttypes={['address']}/>\n\t\t\t  {this.displayMarkers()}\n\t\t\t</Map>\n\t\t\t<div>\n\t\t\t\t<SaveNewAddress handlerClick={this.saveNewAddress}/>\n\t\t\t</div>\n\n\t\t</div>\n\t  );\n\t}\n  \n}\n\n//export default App;\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCZEAaPR-yVMJZ9iAU-FPm67zLO3Ei_iNg'\n})(MapContainer);\t","import React,{Component} from 'react';\nimport {Route} from 'react-router-dom';\nimport AddressList from './Component/AddressList';\nimport MapContainer from './Component/MapContainer';\nimport axios from 'axios'\nimport './App.css';\n\nclass App extends Component{\n\t\n\tURI = \"http://yu-track-backend.us-east-1.elasticbeanstalk.com/location\"\n\tconstructor(props) {\t\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdisplayedMarker:{},\n\t\t\taddressList:[],\n\t\t\tcenterLocation: { }\n\t\t\t}\n\t\tthis.getAddressList();\n\t}\n\tsetDisplayedMarker=(address)=>{\n\t\tthis.setState({\n\t\t\tdisplayedMarker:{name:address.name,position:{lat:address.coords[0],lng:address.coords[1]}},\n\t\t\tcenterLocation:{name:address.name,position:{lat:address.coords[0],lng:address.coords[1]}}\n\t\t\t})\t\t\n\t\t\n\t}\n\t\n\tcreateAddress = (address)=>{\n\t\tconsole.log(address)\n\t\taxios.post(this.URI,address)\n\t\t.then(response => {this.getAddressList()})\n\t\t\n\t}\n\t\n\tupdateAddress=(address)=>{\n\t\taxios.put(this.URI+`/${address._id}`,address)\n\t\t.then(response => {this.getAddressList()})\n\t}\n\t\t\n\tgetAddressList=()=>{\n\t\taxios.get(this.URI)\n\t\t.then(response => {this.setState({ addressList: response.data })})\n\t}\n\t\n\tdeleteAddressList=(arrToDelete)=>{\n\t\tlet deleteRequest = this.getDeleteRequest(arrToDelete);\n\t\taxios.all(deleteRequest)\n\t\t.then(reponse =>{\n\t\t\tthis.getAddressList();\n\t\t})\n\t\t.catch(errors => {\n\t\t  console.log(errors)\n\t\t})\n \t}\n\t\n\tgetDeleteRequest = (arr) =>{\n\t\treturn arr.map((address)=>{\n\t\t\treturn axios.delete(this.URI+`/${address._id}`)\n\t\t})\n\t}\n\n\tcomponentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tthis.setState({\n\t\t\t\tdisplayedMarker:{\n\t\t\t\t\tname:\"Here I am!\",\n\t\t\t\t\tposition:{lat:position.coords.latitude,lng:position.coords.longitude}},\n\t\t\t\tcenterLocation:{\n\t\t\t\t\tname:\"Here I am!\",\n\t\t\t\t\tposition:{lat:position.coords.latitude,lng:position.coords.longitude}}\n\t\t\t\t})\n\t\t});\n\t}\n\n\trender(){\n\t\tconst mapStyles = {\n\t\t\tposition:'relative',\n\t\t\theight: '100%',\n\t\t\twidth: '50%'\n\t\t};\n\t\tconst addressListStyles = {\n\t\t\twidth: '50',\n\t\t\theight: '100%',\n\t\t\ttextAlign:\"center\"\n\t\t};\n\t\tconst {displayedMarker,addressList,centerLocation} = this.state;\n\t  return (\n\t\t\n\t\t<div className=\"container\">\n\t\t\t<div className=\"item\">\n\t\t\t\t<MapContainer \n\t\t\t\tdisplayedMarker={displayedMarker} \n\t\t\t\tstyle={mapStyles} \n\t\t\t\tcenterPoint = {centerLocation}\n\t\t\t\tcreateAddress = {this.createAddress}\n\t\t\t\t/>\n\t\t\t\t<div>&nbsp;</div>\n\t\t\t</div>\n\t\t\t<div className=\"item\">\n\t\t\t\t<div>\n\t\t\t\t\t<AddressList style={addressListStyles} addressList={addressList} \n\t\t\t\t\thandlerGoFunction={this.setDisplayedMarker} \n\t\t\t\t\tdeleteAddressList={this.deleteAddressList}\n\t\t\t\t\tupdateAddress={this.updateAddress}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t</div>\n\t  );\n\t}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}